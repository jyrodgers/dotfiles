# bind prefix to ^-s
set -g prefix C-s
unbind-key C-b
bind-key C-s send-prefix

# allow mouse to scroll up
set -g mouse on

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
    bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
    bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
    bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
    bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
    bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
    bind-key -T copy-mode-vi C-h select-pane -L
    bind-key -T copy-mode-vi C-j select-pane -D
    bind-key -T copy-mode-vi C-k select-pane -U
    bind-key -T copy-mode-vi C-l select-pane -R
    bind-key -T copy-mode-vi C-\ select-pane -l

# split panes using | and -
bind | split-window -h
bind = split-window -v
unbind '"'
unbind %

# Use Vi bindings in tmux command prompt.
set-option -g status-keys vi

# Add truecolor support
set-option -ga terminal-overrides ",xterm-256color:Tc"

# Default terminal is 256 colors
set -g default-terminal "screen-256color"

## change default shell to zsh
set-option -g default-shell /bin/zsh
#


## set scrollback line buffer
set-option -g history-limit 50000

## so you don't end up with window numbers like: 0 1 4 5 6
set-option -g renumber-windows on
#
# Index starts from 1
set-option -g base-index 1
set-option -g pane-base-index 1
#
## set escape time so vim is responsive inside tmux
set -g escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

#
## make new panes and windows use the pwd
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
#
## make iterm window/tab name reflect tmux session
set-option -g set-titles on
set-option -g set-titles-string '#S'
#
## This tmux statusbar config was created by tmuxline.vim: on Wed, 12 Oct 2016
## and then customized by @keeganlow
set -g status-bg "colour67"
set -g message-command-fg "colour253"
set -g status-justify "left"
set -g status-left-length "100"
set -g status "on"
#set -g pane-active-border-fg "colour144"
set -g message-bg "colour16"
set -g status-right-length "100"
set -g status-right-attr "none"
set -g message-fg "colour253"
set -g message-command-bg "colour16"
set -g status-attr "none"
#set -g status-utf8 "on"
set -g pane-border-fg "colour16"
set -g status-left-attr "none"
setw -g window-status-fg "colour253"
setw -g window-status-attr "none"
setw -g window-status-activity-bg "colour67"
setw -g window-status-activity-attr "none"
setw -g window-status-activity-fg "colour144"
setw -g window-status-separator ""
setw -g window-status-bg "colour67"
set -g status-left "#[fg=colour232,bg=colour144] #S #[fg=colour144,bg=colour67,nobold,nounderscore,noitalics]"

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 14
bind J resize-pane -D 12
bind K resize-pane -U 12
bind L resize-pane -R 14

# tmux messages are displayed for x seconds
set-option -g display-time 2000

# Workaround to allow accessing OSX pasteboard
# set-option -g default-command "reattach-to-user-namespace -l zsh"<Paste>

# Vi copypaste
# setw -g mode-keys vi
# unbind p
# bind p paste-buffer
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Renumber windows when a window is closed
# This guarantees it will be easier for you to switch
# between windows as you keep opening and closing them
# set -g renumber-windows on

# # logic so that tmux will treat fzf like it treats vim, sending fzf its own internal navigation commands rather than tmux’s pane navigation commands.
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#   | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
#   | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

# bind -n C-h run "($is_vim && tmux send-keys C-h) || \
#                  tmux select-pane -L"

# bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
#                  ($is_fzf && tmux send-keys C-j) || \
#                  tmux select-pane -D"

# bind -n C-k run "($is_vim && tmux send-keys C-k) || \
#                  ($is_fzf && tmux send-keys C-k)  || \
#                  tmux select-pane -U"

# bind -n C-l run "($is_vim && tmux send-keys C-l) || \
#                  tmux select-pane -R"

# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# # fzf
# bind-key 0 run "tmux split-window -l 12 'zsh -ci ftpane'"
# bind u run "tmux split-window -l 12 'bash -ci ~/.tmux/ftpane.sh'"

# Prompt for window name on creation
# http://superuser.com/questions/565464/can-i-set-a-default-title-for-a-tmux-window
# bind c new-window -c '#{pane_current_path}'\; command-prompt -p 'Name for this new window: ' "rename-window '%%'"
bind c command-prompt -p "window name:" "new-window; rename-window '%%'"
bind r command-prompt -p "New name for window: " "rename-window '%%'"
bind f command-prompt -p find-session 'switch-client -t %%'

# Use fzf to switch sessions
# https://github.com/junegunn/fzf/issues/997
# https://github.com/terryma/dotfiles/blob/master/.tmux.conf#L137
bind C-s new-window 'session=$(tmux list-sessions -F "#{session_name}" \
    | fzf --query="$1" --select-1 --exit-0) \
        && tmux switch-client -t "$session"'

# fzf to switch windows
bind C-w new-window 'window=$(tmux list-windows -F "#{window_name}" \
    | fzf --query="$1" --select-1 --exit-0) \
        && tmux switch-client -t "$window"'


#bind-key f run -b ftwind
#bind-key 0 run "tmux split-window -fv -l 6 'bash -ci ftwind'"
#bind-key f run "tmux split-window -l 12 'ftwind'"


# Dim inactive panes (dark)

## Inactive panes
set -g pane-border-bg colour0
set -g pane-border-fg colour9

## active panes
set -g pane-active-border-bg colour8
set -g pane-active-border-fg colour27
set -g window-style 'bg=colour0'
set -g window-active-style 'bg=colour8'

# Resize the current pane using Alt + direction
bind -n M-k resize-pane -U 5
bind -n M-j resize-pane -D 5
bind -n M-h resize-pane -L 5
bind -n M-l resize-pane -R 5


set -g pane-border-status top
set -g pane-border-format "#{pane_index} #T #{pane_current_command}"

set -g @plugin 'schasse/tmux-easymotion'

run -b '~/.tmux/plugins/tpm/tpm'
