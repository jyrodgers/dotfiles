
export LC_ALL=en_US.UTF-8
export EDITOR=nvim

export PATH=/usr/local/bin:$PATH

export DOTZSH=$HOME/.zsh
if [ ! -d $DOTZSH ]; then
    mkdir -p $DOTZSH
fi

export PIP_REQUIRE_VENV=true
function source-file(){
    [[ -s "$1" ]] && source "$1"
}


# Append history list to the history file; this is the default but we make sure
# because it's required for share_history.
setopt append_history

setopt inc_append_history


# Import new commands from the history file also in other zsh-session.
setopt share_history

# Save each command's beginning timestamp and the duration to the history file.
setopt extended_history

# If a new command line being added to the history list duplicates an older
# one, the older command is removed from the list.
setopt hist_ignore_all_dups

# If a command is issued that can't be executed as a normal command, and the
# command is the name of a directory, perform the cd command to that directory.
setopt auto_cd

HISTSIZE=25000
SAVEHIST=25000


## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data

#source " $HOME/Git/gruvbox/gruvbox_256palette.sh"


# handy keybindings


#map alternate escape key
#bindkey -M viins 'jk' vi-cmd-mode

#bindkey ‘^R’ history-incremental-search-backward




# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#
###############################################################################
# fzf
###############################################################################

# use fzf
# fzf zsh config file

# for f in  ~/.zsh/*(DN); do source $f; done
source ~/.zsh/alias.zsh
source ~/.zsh/completions.zsh
source ~/.zsh/functions.zsh
source ~/.zsh/plugins.zsh
source ~/.zsh/variables.zsh


###############
#   Exports   #
###############
# {{{
export EDITOR=nvim

export PATH=/usr/local/bin:$PATH

# if [ -d $HOME/.cargo/bin ]; then
#     export PATH=$HOME/.cargo/bin:$PATH
# fi

# if [ -d $HOME/.opam ]; then
#     export PATH=$HOME/.opam/system/bin:$PATH
#     # OPAM configuration
#     source ~/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true
# fi

export DOTZSH=$HOME/.zsh
if [ ! -d $DOTZSH ]; then
    mkdir -p $DOTZSH
fi

export PIP_REQUIRE_VENV=true
# }}}

function source-file(){
    [[ -s "$1" ]] && source "$1"
}

# function pg(){
#     ps aux | grep "$1" | grep -v grep
# }
# }}}

####################
####################
# {{{
function zsh-update-comp-defs() {
    local links urls comps file fname

    comps="$DOTZSH/site-functions"
    urls=(
    	https://raw.githubusercontent.com/ttscoff/doing/master/doing.completion.zsh
        https://raw.githubusercontent.com/zsh-users/zsh-completions/master/src/_go
        https://raw.githubusercontent.com/zsh-users/zsh-completions/master/src/_jq
        https://raw.githubusercontent.com/zsh-users/zsh-completions/master/src/_node
        https://raw.githubusercontent.com/zsh-users/zsh-completions/master/src/_cmake
        https://raw.githubusercontent.com/zsh-users/zsh-completions/master/src/_bundle
        https://raw.githubusercontent.com/zsh-users/zsh-completions/master/src/_ghc
        https://raw.githubusercontent.com/zsh-users/zsh-completions/master/src/_perf
        https://raw.githubusercontent.com/docker/cli/master/contrib/completion/zsh/_docker
        https://raw.githubusercontent.com/docker/compose/master/contrib/completion/zsh/_docker-compose
        https://raw.githubusercontent.com/motemen/ghq/master/zsh/_ghq
        https://raw.githubusercontent.com/jwilm/alacritty/master/alacritty-completions.zsh
        https://raw.githubusercontent.com/rhysd/notes-cli/master/completions/zsh/_notes
    )

    for url in $urls; do
        fname="${url:t}"
        if [[ "$fname" == "doing.completion.zsh" ]]; then
            fname="_doing"
        fi
        if [[ "$fname" == "alacritty-completions.zsh" ]]; then
            fname="_alacritty"
        fi
        file="$comps/$fname"
        echo "Downloading complation definition '${file}'"
        if curl -f -L "$url" > "$file"; then
            chmod +x "$file"
        else
            echo "Failed to download ${url}"
            rm -rf $file
        fi
        echo
    done

    # if which rustup > /dev/null; then
    #     echo "Setting up completion definitions for rust toolchain"
    #     rustup completions zsh > "$comps/_rustup" && chmod +x "$comps/_rustup"

    #     local toolchain
    #     toolchain="$(rustup toolchain list | grep ' (default)')"
    #     toolchain="${toolchain%% \(default\)}"
    #     if [[ "$toolchain" != "" ]]; then
    #         rm -rf "$comps/_cargo"
    #         ln -s "$HOME/.rustup/toolchains/$toolchain/share/zsh/site-functions/_cargo" "$comps/_cargo"
    #     fi
    # fi
}

if [ ! -d "$DOTZSH/site-functions" ]; then
    mkdir "$DOTZSH/site-functions"
    zsh-update-comp-defs
fi

fpath=("$DOTZSH/site-functions" ${fpath})

##########################
##########################
# {{{
autoload -Uz compinit; compinit -u
# autoload -Uz colors; colors
# autoload -Uz history-search-end
# autoload -Uz vcs_info
# autoload -Uz terminfo
# autoload -Uz zmv
# autoload -Uz zcalc
# autoload -Uz add-zsh-hook
# autoload -Uz smart-insert-last-word
# autoload -Uz modify-current-argument
# autoload -Uz chpwd_recent_dirs
# autoload -Uz cdr
# }}}

###############
#   Options   #
###############
# {{{
# setopt \
#   always_last_prompt \
#   append_history \
#   auto_cd \
#   auto_list \
#   auto_menu \
#   auto_param_keys \
#   auto_param_slash \
#   auto_pushd \
#   brace_ccl \
#   complete_aliases \
#   complete_in_word \
#   hist_expand \
#   hist_ignore_dups \
#   hist_ignore_space \
#   hist_no_store \
#   hist_reduce_blanks \
#   interactive_comments \
#   listambiguous \
#   long_list_jobs \
#   magic_equal_subst \
#   mark_dirs \
#   no_autoremoveslash \
#   no_beep \
#   no_flow_control \
#   nolistbeep \
#   print_eight_bit \
#   prompt_subst \
#   pushd_ignore_dups \
#   share_history \
# ;
# }}}

##################
#   Completion   #
##################
# {{{
zstyle ':completion:*' completer _complete _expand _list _match _prefix

zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'

zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' '+m:{A-Z}={a-z}'

zstyle ':completion:*' menu select=2

zstyle ':completion:*:sudo:*' command-path $sudo_path $path

zstyle ':completion:*' use-cache true

compdef _git g=git
compdef _docker d=docker
# }}}


# }}}

zstyle ':completion:*:*:cdr:*:*' menu selection
zstyle ':chpwd:*' recent-dirs-max 5000

####################
####################
# {{{
# export ZSHPLUGIN=$DOTZSH/plugins
# if [ ! -d $ZSHPLUGIN ]; then
#     mkdir -p $ZSHPLUGIN
# fi

# Note: zsh-syntax-highlighting must be at the last.
# https://github.com/zsh-users/zsh-syntax-highlighting#why-must-zsh-syntax-highlightingzsh-be-sourced-at-the-end-of-the-zshrc-file
# ZSH_PLUGINS=(
#     https://github.com/zsh-users/zsh-autosuggestions.git
#     https://github.com/Tarrasch/zsh-bd.git
#     https://github.com/hchbaw/opp.zsh.git
#     https://github.com/zsh-users/zsh-syntax-highlighting.git
# )

# function zsh-plugin-update() {
#     local cwd=$PWD

#     local plugin_url
#     for plugin_url in $ZSH_PLUGINS; do
#         local plugin="${${plugin_url%.git}##*/}"
#         local plugin_dir="${ZSHPLUGIN}/${plugin}"

#         if [ -d "$plugin_dir" ]; then
#             # Update
#             echo "Updating ${plugin}..."
#             chpwd_functions= builtin cd "$plugin_dir"
#             git pull
#         else
#             echo "Installing ${plugin}..."
#             chpwd_functions= builtin cd "$ZSHPLUGIN"
#             git clone "$plugin_url"
#         fi
#         echo
#     done

#     chpwd_functions= builtin cd "$cwd"
# }

# function zsh-plugin-load() {
#     local plugin_url
#     for plugin_url in $ZSH_PLUGINS; do
#         local plugin="${${plugin_url%.git}##*/}"
#         local plugin_file="${ZSHPLUGIN}/${plugin}/${plugin}.zsh"  # zsh-foo/zsh-foo.zsh
#         local plugin_file2="${ZSHPLUGIN}/${plugin}/${${plugin}##zsh-}.zsh"  # zsh-foo/foo.zsh
#         local plugin_file3="${ZSHPLUGIN}/${plugin}/${plugin}"  # foo.zsh/foo.zsh
#         if [ -f "$plugin_file" ]; then
#             source "$plugin_file"
#         elif [ -f "$plugin_file2" ]; then
#             source "$plugin_file2"
#         elif [ -f "$plugin_file3" ]; then
#             source "$plugin_file3"
#         else
#             echo "Plugin source not found: ${plugin_file}.  Please install plugin with 'zsh-plugin-update'."
#         fi
#     done
# }
# zsh-plugin-load

# zsh-autosuggestions {{{
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241"
# }}}

# }}}

#######################
#######################
# {{{
# export DOTTMUX="$HOME/.tmux"
# if [ ! -d "$DOTTMUX/plugins/tpm" ]; then
#     echo "Tmux plugin manager is not installed.  Please install it with 'install-tpm' command\n"
#     function install-tpm() {
#         git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#     }
# fi
# }}}


# source-file $HOME/.local.zshrc

# Prevent a dog from crying at start up!
true
